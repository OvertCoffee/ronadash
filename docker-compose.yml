# Check [this useful gist](https://gist.github.com/Mau5Machine/00401feb19433cf0387cc66c8e90c26c) for info re traefik in compose.
version: '3.1'
services:
  traefik:
    image: traefik:v2.0
    restart: always
    container_name: traefik
    ports:
      - "80:80"
      - "8080:8080"
      - "443:443"
    command:
      ## API Settings - https://docs.traefik.io/operations/api/, endpoints - https://docs.traefik.io/operations/api/#endpoints ##
      - --api.insecure=false
      - --api.dashboard=false
      - --api.debug=false
      - --log.level=DEBUG
      ## Provider Settings - https://docs.traefik.io/providers/docker/#provider-configuration ##
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --providers.file.filename=/dynamic.yaml
      - --providers.docker.network=web
      ## Entrypoints Settings - https://docs.traefik.io/routing/entrypoints/#configuration ##
      - --entrypoints.web.address=:80
      - --entrypoints.web-secured.address=:443
      ## Certificate Settings (Let's Encrypt) -  https://docs.traefik.io/https/acme/#configuration-examples ##
      - --certificatesresolvers.mytlschallenge.acme.tlschallenge=true
      - --certificatesresolvers.mytlschallenge.acme.email=${DEVEMAIL}
      - --certificatesresolvers.mytlschallenge.acme.storage=/letsencrypt/acme.json
    volumes:
      - ./letsencrypt:/letsencrypt
      - /var/run/docker.sock:/var/run/docker.sock
      - ./traefik/dynamic.yaml:/dynamic.yaml
    networks:
      - web
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`monitor.${ENDPOINT}`)"
      - "traefik.http.routers.api.service=api@internal"
  db:
    image: postgres
    restart: unless-stopped
    volumes:
      -  ronadash-data:/var/lib/postgresql/data/
    # ports:
      # - 127.0.0.1:5432:5432 # Uncomment to allow connections to the database from localhost
    networks:
      lockdown:
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
  data:
    image: overtcoffee/ronadash-data
    restart: unless-stopped
    networks:
      lockdown:
    depends_on: 
      - db
    volumes:
      - ../COVID-19/csse_covid_19_data/csse_covid_19_daily_reports:/data
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
  graf:
    image: grafana/grafana
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.http.routers.ronadash.entrypoints=web
      - traefik.http.routers.ronadash.rule=Host(`ronadash.${ENDPOINT}`)
      - traefik.http.routers.ronadash.middlewares=redirect@file
      - traefik.http.routers.ronadash-secured.rule=Host(`ronadash.${ENDPOINT}`)
      - traefik.http.routers.ronadash-secured.entrypoints=web-secured
      - traefik.http.routers.ronadash-secured.tls.certresolver=mytlschallenge
    volumes:
      - ronadash-grafana:/var/lib/grafana
      - ./grafana-provisioning:/etc/grafana/provisioning
    networks:
      web:
      lockdown:
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN}
      - GR_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASS}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    depends_on: 
      - db
  landing:
    image: nginx
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.http.routers.landing.entrypoints=web
      - traefik.http.routers.landing.rule=Host(`${ENDPOINT}`)||Host(`www.${ENDPOINT}`)||Host(`landing.${ENDPOINT}`)
      - traefik.http.routers.landing.middlewares=redirect@file
      - traefik.http.routers.landing-secured.rule=Host(`${ENDPOINT}`)||Host(`www.${ENDPOINT}`)||Host(`landing.${ENDPOINT}`)
      - traefik.http.routers.landing-secured.entrypoints=web-secured
      - traefik.http.routers.landing-secured.tls.certresolver=mytlschallenge
    volumes:
      - ./nginx/html:/usr/share/nginx/html
    networks:
      web:
    depends_on:
      - data

volumes:
    ronadash-data:
    ronadash-grafana:
networks:
  web:
    external: true
  lockdown:
    external: false
